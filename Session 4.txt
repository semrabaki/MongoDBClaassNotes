1) db.clothes.insertOne({"name":"VVVVV" , "price":123 , "mark":"polo"});

2)db.clothes.insert([{"name":"VVVVV" , "price":123 , "mark":"polo"},{"name":"KKKKK" , "price":321 , "mark":"Levis"}]);

db.clothes.insert({"name":"VVVVV" , "price":123 , "mark":"polo"});

3)   db.grades.insertMany([
    {_id: 6305 , name:"A. MacDyver", "assignment":5 , "points":24},
    {_id: 6308 , name:"B. Batlock", "assignment":3 , "points":22},
    {_id: 6312 , name:"M. Tagnum", "assignment":5 , "points":30},
    {_id: 6319 , name:"R. Stiles", "assignment":2 , "points":12},
    {_id: 6322 , name:"A. MacDyver", "assignment":2 , "points":14},
    {_id: 6234 , name:"R. Stiles", "assignment":1 , "points":10}
    ]);

    Note:Aggregation in MongoDB same as join in sql.

4)  Find the total points for every assignment
        
    var pipeline = [{$match:{}} , {$group:{"_id":"$assignment", total:{$sum:"$points"}}}];
    db.grades.aggregate(pipeline);

    $match:{} means that we dont have any filters and we will work with all documents
    $group:{ } is for grouping, 5s will be together and 3s will be together
    _id:"$assignment" is to make assignment unique.Every assignment should not be repeated

5)  Find the average points of every assignment

    var pipeline = [{$match:{}} , {$group:{"_id":"$assignment", average:{$avg:"$points"}}}];
    db.grades.aggregate(pipeline);

6) Find the minimum point for every assignment

   var pipeline = [{$match:{}} , {$group:{"_id":"$assignment", min:{$min:"$points"}}}];
   db.grades.aggregate(pipeline);

7) Find the average points of records if the assignment is less than 4.

   var pipeline = [{$match:{assignment:{$lt:4}}}, {$group:{"_id":"null", avarage:{$avg:"$points"}}}];
   db.grades.aggregate(pipeline);
    
    Note: we put null for id because we do not want to group  the assignment in each other we want to see
    every assignment in one result who matches the condition. 

    var pipeline = [{$match:{assignment:{$lt:4}}}, {$group:{"_id":"assignment", avarage:{$avg:"$points"}}}];
   db.grades.aggregate(pipeline);

   Note : in above it will group the assignment numbers and give the avarage

8)  Find the sum of points of the documents whose names are starting with "A"

    var pipeline = [{$match:{name:{$regex:/^A/}}} , {$group:{"_id":"$name" , total:{$sum:"$points"}}}]
    db.grades.aggregate(pipeline);
     
Note: Inside {$match()} to search for the first character in a string we use $regex:/^.../


9)Find the minumum points of the documents which contains "Stiles" in names value

var pipeline = [{$match:{name:{$regex:"Stiles"}}} , {$group:{"_id":"$name" , minimum:{$min:"$points"}}}]
    db.grades.aggregate(pipeline);

10) Find the sume of all points of the documents whose assignments is greater or equal to 3

var pipeline = [{$match:{assignment:{$gte:3}}} , {$group:{"_id":"$assignment" , total:{$sum:"$points"}}}]
    db.grades.aggregate(pipeline);


                       How to count the documents

11) Find the number of documents whose points are less than 19

    //1.way Use find()+ count()
    db.grades.find({"points":{$lt:19}}).count();
    //2.Way: Use count() with a condition
    db.grades.count({"points":{$lt:19}});
    //3.Way:Use aggregate()
    var pipeline=[{$match:{"points":{$lt:19}}}, {$count:"Low points"}]
    db.grades.aggregate(pipeline);



Note: Create an "article" collection inside the "inventory" database, then insert documents
db.articles.insertMany(
[{"author" : "dave", "score" : 80, "views" : 100 },
{"author" : "dave", "score" : 85, "views" : 521 },
{"author" : "ahn", "score" : 60, "views" : 1000 },
{"author" : "li", "score" : 55, "views" : 5000 },
{"author" : "annT", "score" : 60, "views" : 50 },
{"author" : "li", "score" : 94, "views" : 999 },
{"author" : "ty", "score" : 95, "views" : 1000 }]);

12) Find the number of documents whose score is less than 70 OR greater than 90
//1.Way: Use find() + count()

 db.articles.find({$or:[{score:{$lt:70}} , {score:{$gt:90}}]}).count();

//2.way: Use count () with condition

 db.articles.count({$or:[{score:{$lt:70}} , {score:{$gt:90}}]});

 //3.Way:Use aggregate()

 var pipeline = [{$match:{$or:[{score:{$lt:70}} , {score:{$gt:90}}]}} , {$count:"Mins and Maxs"}]
db.articles.aggregate(pipeline);

13) Find the total number of documents whose score is less than 80 AND 
greater than 50.

//1.Way: Use find() + count()

db.articles.find({$and:[{score:{$lt:80}} , {score:{$gt:50}}]}).count();

//2.way: Use count () with condition

 db.articles.count({$and:[{score:{$lt:80}} , {score:{$gt:50}}]});

 //3.Way:Use aggregate()

 var pipeline = [{$match:{$and:[{score:{$lt:80}} , {score:{$gt:50}}]}} , {$count:"Middle"}]
db.articles.aggregate(pipeline);


                 How to add new fields into report

Note: Create an "accounting" collection inside the "inventory" database, then insert documents.
db.accounting.insertMany(

[{"name" : "dave", "expense":[-80, -40, -50, -120], "earn":[100, 150]},
{"name" : "dave", "expense" : [-60, -30, -20], "earn" : [200, 50, 130] },
{"name" : "ahn", "expense" : [-80, -40, -50], "earn" : [300, 450] },
{"name" : "li", "expense" : [-80, -120], "earn" : [500, 50, 70, 10] },
{"name" : "annT", "expense" : [-140, -50, -120], "earn" : [400] },
{"name" : "li", "expense" : [-120], "earn" : [22, 375, 65] },
{"name" : "ty", "expense" : [-180, -40, -70, -12], "earn" : [500, 650, 400]}]);

14) Display the total expense, total earn, and net balance of every person in the existing documents.
Note: to do this, we use aggregate as well.


var pipeline = [
                {$addFields:{totalExpense:{$sum:"$expense"} , totalEarn:{$sum:"$earn"}}},
                {$addFields:{netBalance:{$add:["$totalExpense" , "$totalEarn"]}}},
                {$sort:{netBalance:-1}},
                {$project:{"_id":0 , "expense":0 , "earn":0}}   //to show or not show
];
db.accounting.aggregate(pipeline);